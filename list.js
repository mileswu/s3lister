// Generated by CoffeeScript 1.6.2
(function() {
  var builds, humanizeDate, humanizeSize, items, niceFormatDate, now, parseContents, parseFilename, repo;

  items = [];

  now = new Date();

  builds = $("#builds");

  repo = "https://github.com/mileswu/dokibox/commit/";

  $.get("https://s3.amazonaws.com/dokibox-builds/", function(data) {
    var c, content, contents, item, _i, _j, _len, _ref, _results;

    contents = $(data).find("Contents");
    for (c = _i = _ref = contents.length - 1; _i >= 0; c = _i += -1) {
      content = $(contents[c]);
      if (content.find("Key").text().slice(-7) === ".tar.gz") {
        items.push(parseContents(content));
      }
    }
    _results = [];
    for (_j = 0, _len = items.length; _j < _len; _j++) {
      item = items[_j];
      if (item.file.branch === 'master') {
        _results.push(builds.append("<li class=\"branch-" + item.file.branch + " entry\">\n		<div class=\"size\">" + item.size + "</div>\n		<div class=\"info\">Built " + item.date.text + "</div>\n		<a href=\"" + repo + item.file.commit + "\">\n			<div class=\"commit\">\n				<img src=\"github-32.png\">\n			</div>\n		</a>\n		<a href=\"https://s3.amazonaws.com/dokibox-builds/" + item.file.full + "\">\n			<div class=\"download\">\n				<img src=\"download-32.png\">\n			</div>\n		</a>\n</li>"));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  parseContents = function(contents) {
    var item;

    return item = {
      file: parseFilename(contents.find("Key").text()),
      date: humanizeDate(new Date(contents.find("LastModified").text())),
      hash: contents.find("ETag").text().slice(1, -1).split('-')[0],
      size: humanizeSize(contents.find("Size").text())
    };
  };

  parseFilename = function(fullFileName) {
    var file, _ref;

    file = {
      full: fullFileName
    };
    _ref = fullFileName.match(/.+\/(.+?).tar.gz/)[1].match(/(.+)-(.+?$)/).slice(1, 3), file.branch = _ref[0], file.commit = _ref[1];
    return file;
  };

  humanizeSize = function(size) {
    var count, dum, post;

    post = [' B', ' KiB', ' MiB', ' GiB', ' TiB', ' PiB', ' EiB', ' ZiB', ' YiB'];
    dum = size;
    count = 0;
    while (Math.floor(dum)) {
      dum /= 1024;
      count++;
    }
    return Math.round(size / (Math.pow(1024, count - 1)) * 100) / 100 + post[count - 1];
  };

  humanizeDate = function(date) {
    var d, days, diff, h, hours, m, minutes, pluralize, theDate, weeks;

    pluralize = function(quantity) {
      if (quantity === 1) {
        return '';
      } else {
        return 's';
      }
    };
    theDate = {
      alt: "on " + (niceFormatDate(date))
    };
    diff = Math.round((now - date) / 1000);
    if (diff < 60) {
      theDate.text = "less than a minute ago.";
      return theDate;
    }
    diff = Math.round(diff / 60);
    if (diff < 60) {
      theDate.text = "" + diff + " minute" + (pluralize(diff)) + " ago.";
      return theDate;
    }
    minutes = diff % 60;
    diff = Math.round(diff / 60);
    if (diff < 24) {
      m = minutes > 0 ? ", " + minutes + " minute" + (pluralize(minutes)) : "";
      theDate.text = "" + diff + " hour" + (pluralize(diff)) + m + " ago.";
      return theDate;
    }
    hours = diff % 24;
    diff = Math.round(diff / 24);
    if (diff < 7) {
      h = hours > 0 ? ", " + hours + " hour" + (pluralize(hours)) : "";
      theDate.text = "" + diff + " day" + (pluralize(diff)) + h + " ago.";
      return theDate;
    }
    weeks = Math.round(diff / 7);
    days = diff % 7;
    if (weeks < 5) {
      d = days > 0 ? ", " + days + " day" + (pluralize(days)) : "";
      theDate.text = "" + weeks + " week" + (pluralize(weeks)) + d + " ago.";
      return theDate;
    } else {
      theDate.text = theDate.alt;
      return theDate;
    }
  };

  niceFormatDate = function(date) {
    var pad;

    pad = function(n) {
      if (n < 10) {
        return "0" + n;
      } else {
        return n;
      }
    };
    return "" + (date.getFullYear()) + "-" + (pad(date.getMonth() + 1)) + "-" + (pad(date.getDate())) + " at " + (pad(date.getHours())) + ":" + (pad(date.getMinutes()));
  };

}).call(this);
